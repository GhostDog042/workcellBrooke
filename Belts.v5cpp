{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ntriport Expander20 = triport(PORT20);\nmotor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);\nmotor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);\nmotor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);\nmotor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);\npot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);\npot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);\npot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);\npot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);\nRoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);\n\nbumper EStop = bumper(Brain.ThreeWirePort.E);\nelectromagnet Magnet5 = electromagnet(PORT5);\nmotor EntryMotor = motor(PORT7, ratio18_1, false);\n\nmotor TransportMotor = motor(PORT8, ratio18_1, false);\n\nmotor ExitMotor = motor(PORT9, ratio18_1, true);\n\nmotor DiverterMotor = motor(PORT10, ratio18_1, false);\n\noptical Optical6 = optical(PORT6);\nline Load = line(Brain.ThreeWirePort.F);\nline Pickup = line(Brain.ThreeWirePort.G);\nline Exit = line(Brain.ThreeWirePort.H);\nbumper Bumper20A = bumper(Expander20.A);\nbumper Bumper20B = bumper(Expander20.B);\nled LED20G = led(Expander20.G);\nled LED20H = led(Expander20.H);\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n// \n//    Project:        Arm Workcell - With Sensors\n//    Description:    This example will help you get started with the V5\n//                    Workcell with sensors\n//    Configuration:  Workcell Arm\n//                    Electromagnet in port 5\n//                    Optical in Port 6\n//                    EntryMotor in Port 7\n//                    TransportMotor in Port 8\n//                    ExitMotor in Port 9\n//                    DiverterMotor in Port 10\n//                    Bumper in 3-Wire Port E\n//                    Load LineTracker in 3-Wire Port F\n//                    Pickup LineTracker in 3-Wire Port G\n//                    Exit LineTracker in 3-Wire Port H\n// \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint pick = 0;\nfloat dwn = 0;\nint tput = 0;\nint timeout = 0;\nint nowCol = 0;\nint b0load = 0;\nint b1load = 0;\nint b2load = 0;\nint b3load = 0;\nint binFill[4][2] = {\n  {0,0},//bin0\n  {0,0},//bin1\n  {0,0},//bin2\n  {0,0},//bin3\n};\nbool killswitch = false;\nfloat loadThresh = 66;\nfloat pickThresh = 31;\nfloat exitThresh = 22;\nfloat coords[7][4] = {\n  { 3.7, 5.5, 2.8 , 1},//pickup\n  { 6.5, 3.8, 3 , 2},//bin0\n  { 8.8, 4.1, 3, 2},//bin1\n  { 6.6, 6.1, 3 , 2},//bin2\n  { 8.9, 6.1, 3 , 2},//bin3\n  { 0.418, 10.554, 3 , 2},//exit\n  { 3.705, 5.109, 3 , 0},//rest NTS: Make this 2in/1 disk (whichever further) upstream of the pick sensor\n};\n//NTS: make this 1-4 on coords for continuity, mostly here for refrece and ease of interpretation\nfloat bins[4][4] = {\n  { 7, 3.925, 3 , 2},//bin0\n  { 8.8, 3.831, 3, 2},//bin1\n  { 6.421, 6.498, 3 , 2},//bin2\n  { 8.652, 6.518, 3 , 2},//bin3\n};\n\nvoid GTFOBISH(){Magnet5.drop();}\n\nvoid mov(int dex){\n  RoboticArm1.moveToPositionJoint(coords[dex][0],coords[dex][1],coords[dex][2]);\n    if(coords[dex][3] == 1){\n      Magnet5.pickup();\n    }\n    if(coords[dex][3] == 2){\n      Magnet5.drop();\n  }\n}\n\nvoid lmov(int dex){\n  RoboticArm1.moveToPositionLinear(coords[dex][0],coords[dex][1],coords[dex][2]);\n    if(coords[dex][3] == 1){\n      Magnet5.pickup();\n    }\n    if(coords[dex][3] == 2){\n      Magnet5.drop();\n    }\n}\n\nvoid bmov(int dex){\n  RoboticArm1.moveToPositionLinear(bins[dex][0],bins[dex][1],bins[dex][2]);\n  wait(50,msec);\n  Magnet5.drop();\n  wait(50,msec);\n  Magnet5.drop();\n  wait(50,msec);\n  Magnet5.drop();\n  wait(50,msec);\n}\n\nvoid droop(int dex){\n  if(pick >= 2){\n    pick = 1;\n  }\n  float tmp = pick*0.6;\n  dwn = coords[dex][2] - tmp;\n  pick++;\n}\n\nvoid comp(int dex = 1){\n  droop(dex);\n  RoboticArm1.moveToPositionLinear(coords[dex][0],coords[dex][1],dwn);\n  Magnet5.pickup();\n  RoboticArm1.moveToPositionLinear(coords[dex][0],coords[dex][1],coords[dex][2]);\n  pick++;\n}\n\n//unload a bin\nvoid debin(int bin, int bsize = 2){\n  int bInd = bsize - 1;\n  for (int i = 0; i < bsize; i++) {\n    lmov(bin+1);\n    comp(bin+1);\n    mov(6);\n    TransportMotor.spin(forward);\n    waitUntil(Load.reflectivity() > loadThresh);\n    TransportMotor.stop();\n    binFill[bin][bInd-i] = 0;\n  }\n  TransportMotor.spin(forward);\n  waitUntil(Load.reflectivity() > loadThresh);\n  DiverterMotor.spinToPosition(90, degrees);\n  ExitMotor.spin(forward);\n  waitUntil(Exit.reflectivity() > exitThresh);\n  wait(1.75,seconds);\n  TransportMotor.stop();\n  DiverterMotor.spinToPosition(0,degrees);\n  ExitMotor.stop();\n}\n\n//update the program's knowledge of what's where\nvoid loadBin(int bin){\n  if(bin == 0){\n    binFill[bin][b0load] = nowCol;\n    b0load++;\n  }\n  else if(bin == 1){\n    binFill[bin][b1load] = nowCol;\n    b1load++;\n  }\n  else if(bin == 2){\n    binFill[bin][b2load] = nowCol;\n    b2load++;\n  }\n  else if(bin == 3){\n    binFill[bin][b3load] = nowCol;\n    b3load++;\n  }\n}\n\n// Function to run when the emergency stop button is pressed\nvoid onEStopPressed() {\n  LED20G.off();\n  LED20H.off();\n  RoboticArm1.emergencyStop();\n}\n\n// Task function to constantly display the arm position and sensor values on the brain screen\nint positionSensorDisplay() {\n  while (true) {\n    Brain.Screen.clearScreen();\n\n    // Display the X position on row 1\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Arm X: %0.3f\", RoboticArm1.getAxisPosition(xaxis));\n\n    // Display the Y position on row 2\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Arm Y: %0.3f\", RoboticArm1.getAxisPosition(yaxis));\n\n    // Display the Z position on row 3\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Arm Z: %0.3f\", RoboticArm1.getAxisPosition(zaxis));\n\n    // Display if a disk is detected on row 4\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Disk Detect: %s\", Optical6.isNearObject() ? \"TRUE\" : \"FALSE\");\n\n    // Display the color of the disk if an object is found on row 5\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"R: %s\", Optical6.color() == red ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" / B: %s\", Optical6.color() == blue ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" / G: %s\", Optical6.color() == green ? \"TRUE\" : \"FALSE\");\n\n    // Display the percentage of light reflected back from the Load Sensor on row 6\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Load: %3d\", Load.reflectivity());\n\n    // Display the percentage of light reflected back from the Pickup Sensor on row 7\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Pickup: %3d\", Pickup.reflectivity());\n\n    // Display the percentage of light reflected back from the Exit Sensor on row 8\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Exit: %3d\", Exit.reflectivity());\n\n    //display THROUGHPUT for ultimate factorio domination\n    wait(16, msec);\n  }\n  return 0;\n}\n\n//load a single disk\nvoid load1(){\n  if (Optical6.color() == red) {nowCol = 1;}\n  else if (Optical6.color() == blue){nowCol = 2;}\n  else if (Optical6.color() == green){nowCol = 3;}\n  else{nowCol = 4;}\n  EntryMotor.spinFor(forward, 360*1.5, degrees);\n  EntryMotor.spinFor(reverse, 180, degrees);\n}\n\n//Place a disk in front of the exit sensor\nvoid reject(){\n  TransportMotor.spin(forward);\n  waitUntil(Load.reflectivity() > loadThresh);\n  DiverterMotor.spinToPosition(90, degrees);\n  ExitMotor.spin(forward);\n  waitUntil(Exit.reflectivity() > exitThresh);\n  ExitMotor.stop();\n  TransportMotor.stop();\n  DiverterMotor.spinToPosition(0,degrees);\n\n}\n\n//basically reject but it throws the disk off the end instead\nvoid purge(){\n  TransportMotor.spin(forward);\n  waitUntil(Load.reflectivity() > loadThresh);\n  DiverterMotor.spinToPosition(90, degrees);\n  ExitMotor.spin(forward);\n  waitUntil(Exit.reflectivity() > exitThresh);\n  wait(.75,seconds);\n  TransportMotor.stop();\n  DiverterMotor.spinToPosition(0,degrees);\n  ExitMotor.stop();\n\n}\n\n//places a disk in a certian bin\nvoid sort(int bin){\n  Bumper20B.pressed(GTFOBISH);\n  TransportMotor.spin(forward);\n  waitUntil(Pickup.reflectivity() > pickThresh);\n  TransportMotor.stop();\n  wait(45,msec);\n  mov(0);\n  //mov(bin+1);\n  RoboticArm1.moveToPositionLinear(bins[bin][0],bins[bin][1],bins[bin][2]);\n  wait(50,msec);\n  //waitUntil(Bumper20B.pressing());\n  Magnet5.drop();\n  wait(50,msec);\n  // Magnet5.drop();\n  // wait(200,msec);\n  // Magnet5.drop();\n  // wait(50,msec);\n  // Magnet5.drop();\n  // wait(50,msec);\n  // Magnet5.pickup();\n  // wait(50,msec);\n  // Magnet5.drop();\n  // wait(50,msec);\n  // Magnet5.drop();\n  // wait(50,msec);\n  mov(6);\n  \n}\n\n//sort but smart\nvoid palletize(){\n  if(b0load < 2){\n    sort(0);\n    loadBin(0);\n  }\n  else if(b1load < 2){\n    sort(1);\n    loadBin(1);\n  }\n  else if(b2load < 2){\n    sort(2);\n    loadBin(2);\n  }\n  else if(b3load < 2){\n    sort(3);\n    loadBin(3);\n  }\n  else{\n    purge();\n  }\n}\n\n//basically palletize in reverse. past me: this is gonna be a pain. future me: lmfao\nvoid readd(){\n  for (int i = 0; i < 4; i++) {\n    debin(i+1);\n  }  \n}\n\n// sort a red disc RED DISK = 1\nvoid onRedDetected() {\n  load1();\n  purge();\n}\n\n// sort a green disc GREEN DISK = 2\nvoid onGreenDetected() {\n  load1();\n  if(b0load < 2){\n    sort(0);\n    loadBin(0);\n  }\n  else if(b1load < 2){\n    sort(1);\n    loadBin(1);\n  }\n  else{\n    purge();\n  }\n}\n\n// sort a blue disc BLUE DISK = 3\nvoid onBlueDetected() {\n  load1();\n  if(b2load < 2){\n    sort(2);\n    loadBin(2);\n  }\n  else if(b3load < 2){\n    sort(3);\n    loadBin(3);\n  }\n  else{\n    purge();\n  }\n}\n\nint main() {\n  // register emergency stop event handlers\n  EStop.pressed(onEStopPressed);\n  Bumper20A.pressed(onEStopPressed);\n  // short wait to make sure the emergency stop event is fully registered\n  wait(15, msec);\n  LED20G.on();\n  Bumper20B.pressed(GTFOBISH);\n  // initial device setup\n  RoboticArm1.setMasteringValues(1836, 1985, 2071, 474);\n  RoboticArm1.setToolTipOffset(-0.7, 0.0, -1.0);\n  Magnet5.setPower(100);\n  Optical6.setLight(ledState::on);\n  Optical6.setLightPower(100, percent);\n  EntryMotor.setVelocity(70, percent);\n  TransportMotor.setVelocity(15, percent);\n  ExitMotor.setVelocity(50, percent);\n  DiverterMotor.setVelocity(30, percent);\n  RoboticArm1.setArmAngle(0);\n  Brain.Screen.setFont(mono30);\n\n  // start the position and sensor value display task\n  vex::task positionSensorDisplayTask(positionSensorDisplay);\n\n  LED20H.on();\n  // actual logic for sorting discs by color\n  while (true) {\n    timeout = 0;\n    while(!(Optical6.isNearObject())){\n      if(timeout >= 12000){\n        killswitch = true;\n        break;\n      }\n      else{\n        timeout++;\n        wait(5,msec);\n      }\n    }\n    if(killswitch){\n      onEStopPressed();\n    }\n    else if (Optical6.color() == red) {\n      onRedDetected();\n    }\n    else if (Optical6.color() == blue)\n    {\n      onBlueDetected();\n    }\n    else if (Optical6.color() == green)\n    {\n      onGreenDetected();\n    }\n    else{\n      load1();\n      purge();\n    }\n    wait(5, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,3,4,1,2,3,4],"name":"RoboticArm1","customName":false,"deviceType":"RoboticArm","deviceClass":"RoboticArm","setting":{},"triportSourcePort":22},{"port":[5],"name":"EStop","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[5],"name":"Magnet5","customName":false,"deviceType":"Magnet","deviceClass":"electromagnet","setting":{},"triportSourcePort":22},{"port":[7],"name":"EntryMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"TransportMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"ExitMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"DiverterMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"Optical6","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[6],"name":"Load","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[7],"name":"Pickup","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[8],"name":"Exit","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[20],"name":"Expander20","customName":false,"deviceType":"Expander","deviceClass":"triport","setting":{},"triportSourcePort":22},{"port":[1],"name":"Bumper20A","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":20},{"port":[2],"name":"Bumper20B","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":20},{"port":[7],"name":"LED20G","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":20},{"port":[8],"name":"LED20H","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":20}],"slot":2,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}