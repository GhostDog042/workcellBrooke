{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ntriport Expander20 = triport(PORT20);\nmotor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);\nmotor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);\nmotor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);\nmotor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);\npot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);\npot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);\npot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);\npot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);\nRoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);\n\nbumper EStop = bumper(Brain.ThreeWirePort.E);\nelectromagnet Magnet5 = electromagnet(PORT5);\nmotor EntryMotor = motor(PORT7, ratio18_1, false);\n\nmotor TransportMotor = motor(PORT8, ratio18_1, false);\n\nmotor ExitMotor = motor(PORT9, ratio18_1, true);\n\nmotor DiverterMotor = motor(PORT10, ratio18_1, false);\n\noptical Optical6 = optical(PORT6);\nline Load = line(Brain.ThreeWirePort.F);\nline Pickup = line(Brain.ThreeWirePort.G);\nline Exit = line(Brain.ThreeWirePort.H);\nbumper Bumper20A = bumper(Expander20.A);\nbumper Bumper20B = bumper(Expander20.B);\nled LED20G = led(Expander20.G);\nled LED20H = led(Expander20.H);\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n// \n//    Project:        Arm Workcell - With Sensors\n//    Description:    This example will help you get started with the V5\n//                    Workcell with sensors\n//    Configuration:  Workcell Arm\n//                    Electromagnet in port 5\n//                    Optical in Port 6\n//                    EntryMotor in Port 7\n//                    TransportMotor in Port 8\n//                    ExitMotor in Port 9\n//                    DiverterMotor in Port 10\n//                    Bumper in 3-Wire Port E\n//                    Load LineTracker in 3-Wire Port F\n//                    Pickup LineTracker in 3-Wire Port G\n//                    Exit LineTracker in 3-Wire Port H\n// \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nint tput = 0;\nfloat coords[6][4] = {\n  { 8.1, -5.6, 2.1 , 1},\n  { 8.1, -5.6, 3.543 , 0},\n  { 9.3, 2.2, 2.272, 2},\n  { 9.3, 4.75, 2.120 , 2},\n  { 7, 4.75, 2.383 , 2},\n  { 8, -1, 2.4 , 0},\n};\n\nvoid mov(int dex){\n    RoboticArm1.moveToPositionJoint(coords[dex][0],coords[dex][1],coords[dex][2]);\n      if(coords[dex][3] == 1){\n        Magnet5.pickup();\n      }\n      if(coords[dex][3] == 2){\n        Magnet5.drop();\n    }\n}\n\nvoid lmov(int dex){\n    RoboticArm1.moveToPositionLinear(coords[dex][0],coords[dex][1],coords[dex][2]);\n      if(coords[dex][3] == 1){\n        Magnet5.pickup();\n      }\n      if(coords[dex][3] == 2){\n        Magnet5.drop();\n      }\n}\n\n// Function to run when the emergency stop button is pressed\nvoid onEStopPressed() {\n  RoboticArm1.emergencyStop();\n  LED20G.off();\n  LED20H.off();\n}\n\nvoid throughput(){\n  \n}\n\n// Task function to constantly display the arm position and sensor values on the brain screen\nint positionSensorDisplay() {\n  while (true) {\n    Brain.Screen.clearScreen();\n\n    // Display the X position on row 1\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Arm X: %0.3f\", RoboticArm1.getAxisPosition(xaxis));\n\n    // Display the Y position on row 2\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Arm Y: %0.3f\", RoboticArm1.getAxisPosition(yaxis));\n\n    // Display the Z position on row 3\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Arm Z: %0.3f\", RoboticArm1.getAxisPosition(zaxis));\n\n    // Display if a disk is detected on row 4\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Disk Detect: %s\", Optical6.isNearObject() ? \"TRUE\" : \"FALSE\");\n\n    // Display the color of the disk if an object is found on row 5\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"R: %s\", Optical6.color() == red ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" / B: %s\", Optical6.color() == blue ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" / G: %s\", Optical6.color() == green ? \"TRUE\" : \"FALSE\");\n\n    // Display the percentage of light reflected back from the Load Sensor on row 6\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Load: %3d\", Load.reflectivity());\n\n    // Display the percentage of light reflected back from the Pickup Sensor on row 7\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Pickup: %3d\", Pickup.reflectivity());\n\n    // Display the percentage of light reflected back from the Exit Sensor on row 8\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Exit: %3d\", Exit.reflectivity());\n\n    //display THROUGHPUT for ultimate factorio domination\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"THROUGHPUT: %3d\", tput);\n    wait(0.2, seconds);\n  }\n  return 0;\n}\n\n// sort a red disc\nvoid onRedDetected() {\n  // Insert code here for sorting the red discs\n}\n\n// sort a green disc\nvoid onGreenDetected() {\n  // Insert code here for sorting the green discs\n}\n\n// sort a blue disc\nvoid onBlueDetected() {\n  // Insert code here for sorting the blue discs\n}\n\nint main() {\n  // register emergency stop event handlers\n  EStop.pressed(onEStopPressed);\n  Bumper20A.pressed(onEStopPressed);\n  // short wait to make sure the emergency stop event is fully registered\n  wait(15, msec);\n  LED20G.on();\n\n  // initial device setup\n  RoboticArm1.setMasteringValues(0.0, 0.0, 0.0, 0.0);\n  RoboticArm1.setToolTipOffset(-0.7, 0.0, -1.0);\n  Magnet5.setPower(100);\n  Optical6.setLight(ledState::on);\n  Optical6.setLightPower(100, percent);\n  EntryMotor.setVelocity(70, percent);\n  TransportMotor.setVelocity(15, percent);\n  ExitMotor.setVelocity(50, percent);\n  DiverterMotor.setVelocity(30, percent);\n  Brain.Screen.setFont(mono30);\n\n  // start the position and sensor value display task\n  vex::task positionSensorDisplayTask(positionSensorDisplay);\n\n  LED20H.on();\n  // actual logic for sorting discs by color\n  while (true) {\n    waitUntil(Optical6.isNearObject());\n    if (Optical6.color() == red) {\n      onRedDetected();\n    }\n    else if (Optical6.color() == blue)\n    {\n      onBlueDetected();\n    }\n    else if (Optical6.color() == green)\n    {\n      onGreenDetected();\n    }\n    wait(5, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,3,4,1,2,3,4],"name":"RoboticArm1","customName":false,"deviceType":"RoboticArm","deviceClass":"RoboticArm","setting":{},"triportSourcePort":22},{"port":[5],"name":"EStop","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[5],"name":"Magnet5","customName":false,"deviceType":"Magnet","deviceClass":"electromagnet","setting":{},"triportSourcePort":22},{"port":[7],"name":"EntryMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"TransportMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"ExitMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"DiverterMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"Optical6","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[6],"name":"Load","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[7],"name":"Pickup","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[8],"name":"Exit","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[20],"name":"Expander20","customName":false,"deviceType":"Expander","deviceClass":"triport","setting":{},"triportSourcePort":22},{"port":[1],"name":"Bumper20A","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":20},{"port":[2],"name":"Bumper20B","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":20},{"port":[7],"name":"LED20G","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":20},{"port":[8],"name":"LED20H","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":20}],"slot":2,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}