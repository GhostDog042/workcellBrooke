{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ntriport Expander20 = triport(PORT20);\nmotor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);\nmotor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);\nmotor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);\nmotor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);\npot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);\npot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);\npot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);\npot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);\nRoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);\n\nbumper EStop = bumper(Brain.ThreeWirePort.E);\nelectromagnet Magnet5 = electromagnet(PORT5);\ncontroller Controller1 = controller(primary);\nbumper Bumper20A = bumper(Expander20.A);\nbumper Bumper20B = bumper(Expander20.B);\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n// \n//    Project:        Arm UI Panel\n//    Description:    This example will configure the Workcell Arm and display\n//                    a basic UI on the V5 Brain's screen that you can configure\n//    Configuration:  Workcell Arm\n//                    Bumper in 3-Wire Port E\n//                    Electromagnet in Port 5\n//                    Pendant Switch or Controller in Port 20\n// \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nint armNow[3] = {5,1,3};\nint armSoon[3] = {5,1,3};\nint used[4] = {0,0,0,0};\nint coords[4][4] = {\n  { 5, 1, 3 , 0},\n  { 5, 1, 3 , 0},\n  { 5, 1, 3 , 0},\n  { 5, 1, 3 , 0},\n};\n\n\nvoid logpos(int dex){\n  coords[dex][0] = round(RoboticArm1.getAxisPosition(xaxis) * 10.0) / 10.0;\n  coords[dex][1] = round(RoboticArm1.getAxisPosition(yaxis) * 10.0) / 10.0;\n  coords[dex][2] = round(RoboticArm1.getAxisPosition(zaxis) * 10.0) / 10.0;\n  if(Controller1.ButtonR1.pressing()){\n    coords[dex][3] = 1;\n  }\n  if(Controller1.ButtonR2.pressing()){\n    coords[dex][3] = 2;\n  }\n}\n\nvoid mov(int dex){\n  RoboticArm1.moveToPositionJoint(coords[dex][0],coords[dex][1],coords[dex][2]);\n    if(coords[dex][3] == 1){\n      Magnet5.pickup();\n    }\n    if(coords[dex][3] == 2){\n      Magnet5.drop();\n    }\n}\n\nvoid mov0(){\n  if(used[0] == 0){\n    logpos(0);\n    used[0]++;\n  }\n  else{\n    mov(0);\n  }\n}\n\n// Function to run when the V5 Brain's screen is pressed\nvoid onScreenPressed() {\n  if (Brain.Screen.xPosition() > 250) {\n    if (Brain.Screen.yPosition() > 125) {\n      // Blue Box Pressed\n      mov0();\n    }\n    else {\n      // Green Box Pressed\n      if(used[1] == 0){\n          logpos(1);\n        used[1]++;\n      }\n      else{\n        mov(1);\n      }\n    }\n  }\n  else {\n    if (Brain.Screen.yPosition() > 125) {\n      // Red Box Pressed\n      if(used[2] == 0){\n        logpos(2);\n        used[2]++;\n      }\n      else{\n        mov(2);\n      }\n    }\n    else {\n      // White Box Pressed\n      if(used[3] == 0){\n        logpos(3);\n        used[3]++;\n      }\n      else{\n        mov(3);\n      }\n    }\n  }\n}\n\nvoid rcee() {\n  while (Controller1.ButtonL2.pressing()) {\n  /*if(Controller1.ButtonL1.pressing()){\n    if(Controller1.Axis2.position() > 20){armSoon[0] = armSoon[0]+.25;}\n    else if(Controller1.Axis2.position() < -20){armSoon[0] = armSoon[0]-.25;}\n    if(Controller1.Axis1.position() > 20){armSoon[1] = armSoon[1]+.25;}\n    else if(Controller1.Axis1.position() < -20){armSoon[1] = armSoon[1]-.25;}\n    if(Controller1.Axis3.position() > 20){armSoon[2] = armSoon[2]+.25;}\n    else if(Controller1.Axis3.position() < -20){armSoon[2] = armSoon[2]-.25;}\n  }\n  else{*/\n    if(Controller1.Axis2.position() > 20){armSoon[0] = armSoon[0]+0.1;}\n    else if(Controller1.Axis2.position() < -20){armSoon[0] = armSoon[0]-0.1;}\n    if(Controller1.Axis1.position() > 20){armSoon[1] = armSoon[1]+0.1;}\n    else if(Controller1.Axis1.position() < -20){armSoon[1] = armSoon[1]-0.1;}\n    if(Controller1.Axis3.position() > 20){armSoon[2] = armSoon[2]+0.1;}\n    else if(Controller1.Axis3.position() < -20){armSoon[2] = armSoon[2]-0.1;}\n  //}\n  RoboticArm1.moveToPositionJoint(armSoon[0], armSoon[1], armSoon[2]);\n\n  }\n\n}\n\n\n// Function to run when the emergency stop button is pressed\nvoid onEStopPressed() {\n  RoboticArm1.emergencyStop();\n}\n\nvoid boost(){\n  Magnet5.pickup();\n}\n\nvoid leggo(){\n  Magnet5.drop();\n}\n\nint main() {\n  // register event handlers\n  Brain.Screen.pressed(onScreenPressed);\n  EStop.pressed(onEStopPressed);\n  Bumper20A.pressed(onEStopPressed);\n  Controller1.ButtonB.pressed(onEStopPressed);\n  Controller1.ButtonDown.pressed(onEStopPressed);\n  Controller1.ButtonR1.pressed(boost);\n  Controller1.ButtonR2.pressed(leggo);\n  Controller1.ButtonL2.pressed(rcee);\n  Bumper20B.pressed(mov0);\n  armSoon[0] = round(RoboticArm1.getAxisPosition(xaxis) * 10.0) / 10.0;\n  armSoon[1] = round(RoboticArm1.getAxisPosition(yaxis) * 10.0) / 10.0;\n  armSoon[2] = round(RoboticArm1.getAxisPosition(zaxis) * 10.0) / 10.0;\n  wait(15, msec);\n  // post event registration\n\n  // draw UI on brain screen\n  Brain.Screen.setPenColor(white);\n  Brain.Screen.setFillColor(white);\n  Brain.Screen.drawRectangle(30, 10, 200, 100);\n  Brain.Screen.setFillColor(red);\n  Brain.Screen.drawRectangle(30, 125, 200, 100);\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawRectangle(250, 10, 200, 100);\n  Brain.Screen.setFillColor(blue);\n  Brain.Screen.drawRectangle(250, 125, 200, 100);\n\n  // configure the arm\n  RoboticArm1.setMasteringValues(1833, 2089, 1964, 403);\n  RoboticArm1.setToolTipOffset(-0.7, 0.0, -1.0);\n  Magnet5.setPower(100);\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,3,4,1,2,3,4],"name":"RoboticArm1","customName":false,"deviceType":"RoboticArm","deviceClass":"RoboticArm","setting":{},"triportSourcePort":22},{"port":[5],"name":"EStop","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[5],"name":"Magnet5","customName":false,"deviceType":"Magnet","deviceClass":"electromagnet","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[20],"name":"Expander20","customName":false,"deviceType":"Expander","deviceClass":"triport","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Bumper20A","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":20},{"port":[2],"name":"Bumper20B","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":20}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}