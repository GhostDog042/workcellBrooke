{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);\nmotor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);\nmotor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);\nmotor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);\npot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);\npot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);\npot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);\npot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);\nRoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);\n\nelectromagnet Magnet5 = electromagnet(PORT5);\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n// \n//    Project:        Arm Jogging\n//    Description:    This example will let you control the Workcell Arm by\n//                    pressing buttons on the screen of the V5 Brain.\n//    Configuration:  Workcell Arm\n//                    Electromagnet in Port 5\n// \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat xPos, yPos, zPos;\n\n// User defined function\nvoid printCurrentPosition() {\n  Brain.Screen.clearLine(1);\n  Brain.Screen.setPenColor(white);\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(\"X: %.1f\", xPos);\n  Brain.Screen.setCursor(1, 11);\n  Brain.Screen.print(\"Y: %.1f\", yPos);\n  Brain.Screen.setCursor(1, 21);\n  Brain.Screen.print(\"Z: %.1f\", zPos);\n}\n\nvoid onScreenPressed() {\n  // when the screen is pressed, check if in a button...\n  while(Brain.Screen.pressing()){\n  if (40.0 < Brain.Screen.yPosition() && Brain.Screen.yPosition() < 120.0) {\n    if (10.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 90.0) {\n      // move X + 0.1\n      xPos = xPos + 0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (100.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 180.0) {\n      // move Y + 0.1\n      yPos = yPos + 0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (190.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 270.0) {\n      // move Z + 0.1\n      zPos = zPos + 0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (280.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 360.0) {\n      // pickup\n      Magnet5.pickup(500);\n    }\n  } else if (130.0 < Brain.Screen.yPosition() && Brain.Screen.yPosition() < 210.0) {\n    if (10.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 90.0) {\n      // move X - 0.1\n      xPos = xPos + -0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (100.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 180.0) {\n      // move Y - 0.1\n      yPos = yPos + -0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (190.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 270.0) {\n      // move Z - 0.1\n      zPos = zPos + -0.1;\n      RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n      printCurrentPosition();\n    } else if (280.0 < Brain.Screen.xPosition() && Brain.Screen.xPosition() < 360.0) {\n      // drop\n      Magnet5.drop();\n    }\n  }\n  }\n}\n\nint main() {\n  // register event handlers\n  Brain.Screen.pressed(onScreenPressed);\n\n  // enter the mastering values for your arm\n  RoboticArm1.setMasteringValues(1836, 1985, 2071, 474);\n  RoboticArm1.setToolTipOffset(-0.7, 0.0, -1.0);\n  Magnet5.setPower(100);\n  xPos = round(RoboticArm1.getAxisPosition(xaxis) * 10.0) / 10.0;\n  yPos = round(RoboticArm1.getAxisPosition(yaxis) * 10.0) / 10.0;\n  zPos = round(RoboticArm1.getAxisPosition(zaxis) * 10.0) / 10.0;\n\n  // draw buttons\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawRectangle(10, 40, 80, 80);\n  Brain.Screen.drawRectangle(10, 130, 80, 80);\n  Brain.Screen.drawRectangle(100, 40, 80, 80);\n  Brain.Screen.drawRectangle(100, 130, 80, 80);\n  Brain.Screen.drawRectangle(190, 40, 80, 80);\n  Brain.Screen.drawRectangle(190, 130, 80, 80);\n  Brain.Screen.drawRectangle(280, 40, 80, 80);\n  Brain.Screen.drawRectangle(280, 130, 80, 80);\n  \n  // print text in buttons\n  Brain.Screen.setPenColor(black);\n  Brain.Screen.setCursor(4, 5);\n  Brain.Screen.print(\"X+\");\n  Brain.Screen.setCursor(4, 14);\n  Brain.Screen.print(\"Y+\");\n  Brain.Screen.setCursor(4, 23);\n  Brain.Screen.print(\"Z+\");\n  Brain.Screen.setCursor(4, 30);\n  Brain.Screen.print(\"Pickup\");\n  Brain.Screen.setCursor(9, 5);\n  Brain.Screen.print(\"X-\");\n  Brain.Screen.setCursor(9, 14);\n  Brain.Screen.print(\"Y-\");\n  Brain.Screen.setCursor(9, 23);\n  Brain.Screen.print(\"Z-\");\n  Brain.Screen.setCursor(9, 31);\n  Brain.Screen.print(\"Drop\");\n  \n  // make sure we are actually at the starting position\n  RoboticArm1.moveToPositionJoint(xPos, yPos, zPos);\n  \n  // print the starting position\n  printCurrentPosition();\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,3,4,1,2,3,4],"name":"RoboticArm1","customName":false,"deviceType":"RoboticArm","deviceClass":"RoboticArm","setting":{},"triportSourcePort":22},{"port":[5],"name":"Magnet5","customName":false,"deviceType":"Magnet","deviceClass":"electromagnet","setting":{},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}